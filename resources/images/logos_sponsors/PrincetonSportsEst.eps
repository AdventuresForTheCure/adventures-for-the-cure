%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0.1%%For: (jrm) (dx2)%%Title: (PS logo w/o established.eps)%%CreationDate: (10/29/03) (4:18 PM)%%BoundingBox: 7 608 256 719%%HiResBoundingBox: 7.1714 608.4324 255.5659 718.2876%%DocumentProcessColors:%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.1%AI3_ColorUsage: Color%%DocumentCustomColors: (PANTONE 541 CVC)%%CMYKCustomColor: 1 0.51 0 0.3 (PANTONE 541 CVC)%%+ 1 0.72 0 0.06 (PANTONE Reflex Blue CV)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 1296 1296%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -114 840 2 1018 725 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog% ------------------------------------------------------%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /Adobe_level2_AI5 23 dict dup begin	put% use packed arrays immediately	% packedarray emulation	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def		end		0	} if	pop% activate packing now	userdict /defaultpacking currentpacking put true setpacking% initialize, terminate	% note : no binding loop needed here by design	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{			end		} if	} bind def% mark for later stack clean-up	mark% custom color business	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}	% don't bind 'setcmykcolor in this procedure		def	} if%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def	%	newer version handles errors on clones with cvx or exec which would leave junk on the stack%	(bh 12/2/93)	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put% test for Level 2 availability	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq{	begin		60	% 60 lpi is default		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if	end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)		% cmyk => gray conversion emulation		% note this revision approved by Ed Taft		% for correcting the out of gamut problem		% in our current emulations		% don't bind these guys so 'setgray/currentgray can be overloaded		/setcmykcolor where not		{			% see red book II, pp. 305			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		% LEVEL 2 EMULATIONS		% setoverprint emulation		/setoverprint where not		{			/setoverprint /pop load def		} if		% selectfont emulation		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		% cshow emulation		/cshow where not		{			% {proc} (string)			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if% clean up	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put% *** other separation state tests if we're not on a composite page		composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def		end	} if	end defaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images% Version 1.0 12/25/95% Copyright (C) 1995-96% Adobe Systems Incorporated% All Rights Reserved% ------------------------------------------------------userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin% ------------------------------------------------------% Routine Overview% %	String Iterators%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)%		WalkCMYKString (given a single source string, get the components and call a proc)% %	Level1 Emulator Routines%		StuffRGBIntoGrayString%		RGBToGrayImageProc%		StuffCMYKIntoGrayString %		CMYKToGrayImageProc %		ColorImageCompositeEmulator % %	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)%		CMYKToSeparatedCMYKImageProc% %	ColorImage and Utility Routines.%		FourEqual%		TestPlateIndex%		colorimage% % ------------------------------------------------------	/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 14 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null def% define _colorimage if it doesn't already existcurrentdict /_colorimage known not{	/colorimage where	{		% sourcedictionary (systemdict or a separation proc redefinition)		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def% ------------------------------------------------------% rgb proc out --WalkRGBString--% ------------------------------------------------------/WalkRGBString{	% rgb proc out	0 3 index	% rgb proc out outindex rgb	dup length 1 sub 0 3 3 -1 roll	{		% rgb proc out outindex rgb index		3 getinterval { } forall		% call the stuff proc		% rgb proc out outindex r g b		5 index exec		% push rgb for the next loop iteration		% rgb proc out outindex		3 index		% rgb proc out outindex rgb	} for		% clean up the stack	% rgb proc out outindex rgb	 5 { pop } repeat} def% ------------------------------------------------------% cmyk proc gray --WalkCMYKString--% ------------------------------------------------------/WalkCMYKString{	% cmyk proc gray	0 3 index	% cmyk proc gray grayindex cmyk	dup length 1 sub 0 4 3 -1 roll	{		% cmyk proc gray grayindex cmyk index		4 getinterval { } forall				% cmyk proc gray grayindex c m y k		6 index exec				% cmyk proc gray grayindex		3 index				% cmyk proc gray grayindex cmyk	} for		% clean up the stack	% cmyk proc gray grayindex cmyk	5 { pop } repeat	} def% ------------------------------------------------------% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffRGBIntoGrayString{	% gray grayindex r g b	.11 mul exch		% gray grayindex r bk g	.59 mul add exch		% gray grayindex bkgk r	.3 mul add		% gray grayindex k	cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --RGBToGrayImageProc-- string% ------------------------------------------------------/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin			% call the source proc to get the chunky rgb string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% rgb		dup length 3 idiv string		% roll off a copy of the gray string		% rgb gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkRGBString		% gray rgb gray		/StuffRGBIntoGrayString load exch		% call the rgb conversion iterator		% gray rgb proc gray		WalkRGBString		% return the gray string		% gray		end} def% ------------------------------------------------------% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffCMYKIntoGrayString{	% gray grayindex c m y k	exch .11 mul add		% gray grayindex c m yk	exch .59 mul add		% gray grayindex c mkyk	exch .3 mul add		% pin k to 255	% gray gray index k	dup 255 gt { pop 255 } if		% gray grayindex k	255 exch sub cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --CMYKToGrayImageProc-- string% ------------------------------------------------------/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		% call the source proc to get the chunky cmyk string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% cmyk		dup length 4 idiv string		% roll off a copy of the gray string		% cmyk gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkCMYKString		% gray cmyk gray		/StuffCMYKIntoGrayString load exch		% call the cmyk iterator		% gray cmyk proc gray		WalkCMYKString		% return the gray string		% gray	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--% ------------------------------------------------------/ColorImageCompositeEmulator{	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone	% calls colorimage on a level 1 device with planar data.	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.	pop true eq	{		% pop off the parameters and return		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				% save off the original chunky source function				sourcearray 0 3 -1 roll put							% push the appropriate cover proc				channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load			end		} if		image	} ifelse} def% ------------------------------------------------------% --SeparateCMYKImageProc-- string% ------------------------------------------------------/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			% planar case: call the source proc for the current plate and return its result			sourcearray plateindex get exec		}		{						% call the source proc to get the chunky cmyk string			sourcearray 0 get exec						% make a grayscale string of the same pixel count (ouch, pull me out of this loop)			% cmyk			dup length 4 idiv string						% cmyk			0 2 index						% cmyk gray grayindex cmyk			plateindex 4 2 index length 1 sub			{				% cmyk gray grayindex cmyk channelindex				get 255 exch sub								% cmyk gray grayindex grayvalue				3 copy put pop 1 add								% cmyk gray grayindex				2 index			} for			% return the gray string			% cmyk gray grayindex cmyk			pop pop exch pop		} ifelse	end} def	% ------------------------------------------------------% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--% ------------------------------------------------------/FourEqual{	% s1 s2 s3 s4 c1 c2 c3 c4	4 index ne	{		pop pop pop false	}	{		% s1 s2 s3 s4 c1 c2 c3		4 index ne		{			pop pop false		}		{			% s1 s2 s3 s4 c1 c2			4 index ne			{				pop false			}			{				% s1 s2 s3 s4 c1				4 index eq			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------%  --TestPlateIndex-- plateindex% ------------------------------------------------------/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		% assume we're not separating		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			% cyan plate?			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				% magenta plate?				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					% yellow plate?					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						% black plate						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--% ------------------------------------------------------/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		% setup for following if statement		4 sourcecount add index dup 		8 eq exch 1 eq or not	end		% is this not 1 or 8 bit?	{		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.		/_colorimage load null ne		{			% call the original (they probably punt if we're separating)			_colorimage		}		{			% pop off the parameters and return			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating		% an image to a custom plate. The last case assumes that the separation procs surrounding us		% take care of punching out		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			% Call the colorimage emulator if we're printing to a level 1 device			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				% call image if this is a grayscale so that Quark doesn't die on custom plates				dup 1 eq				{					pop pop image				}				{					% draw to the null device if we're on a custom plate					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												% stolen from PhotoShop						0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												% push the appropriate transfer proc (first case is negative						% second case is positive) and call settransfer						{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										% restore from the null device if necessary					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			% Are we separating a grayscale image?			dup 1 eq			{				% let the surrounding separation procset handle the separation				pop pop				image			}			{				% pop channelcount and multiplesources since they're not used by the image operator				pop pop				% Prepare to call the image operator with a cover proc				Adobe_ColorImage_AI6_Vars begin					% save off the source procs for our cover proc					% width height bitsperpixel matrix firstsource...lastsource					sourcecount -1 0					{									% width height bitsperpixel matrix firstsource...lastsource index						exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load				end				% bypass the separation procset since some applications don't handle chunky and the				% old separator doesn't handle colorimage				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------% --XI--% ------------------------------------------------------/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def				XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def				XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			% skip the %BeginBinary comment			currentfile 128 string readline pop pop		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% synch the PostScript fill with Illustrator's notion of the current fill			/_lp /null ddef			_fc			/_lp /imagemask ddef						imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% call image if passed grayscale or bitmap data. Some applications			% die if colorimage is called with gray data.			XIChannelCount 1 eq			{				% Some applications refuse to separate a grayscale image to the black plate if				% the currentgray is white. Hack around.								gsave				0 setgray								image								grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore	end} def	end%%EndProcSet% ------------------------------------------------------%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------currentpacking true setpacking% 71 vars, but leave slack of 10 entries for custom Postscript fragmentsuserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput% paint operands/_eo false def/_lp /none def/_pf{} def	% paint fill/_ps{} def	% paint stroke/_psf{} def	% paint string fill/_pss{} def	% paint string stroke/_pjsf{} def	% paint justified string fill/_pjss{} def	% paint justified string stroke/_pola 0 def/_doClip 0 def% paint operators/cf currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def	% y character spacing/_cx 0 def	% x word spacing/_cy 0 def	% y word spacing/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def% typography operators/Tx{} def/Tj{} def% compound path operators/CRender{} def% printing/_AI3_savepage{} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def% pattern operands/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def% discard variables (12 total)/discardSave null def	% holds save used in discard loop/buffer 256 string def	% line buffer string : assume 256 chars/line/beginString null def	% begin delimiter/endString null def	% end delimiter/endStringLength null def	% holds buffer size for reading by byte technique/layerCnt 1 def	% internal variables for discard loop/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def% variable for doing clipping without rendering/clipForward? false def% end the vars dictionaryend% =========================================userdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin% initialization/initialize	% - initialize -{	% pushing main on the stack	Adobe_Illustrator_AI5 dup begin	% push the vars dictionary	Adobe_Illustrator_AI5_vars begin	% at this point the main and vars dictionaries	% are in the state we wish them to be	% on exit from the initialize call	% bind the procedures in the discard dictionary	discardDict	{		bind pop pop	} forall	% begin the nc dictionary	dup /nc get begin	% bind the procs in main	{		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall	% turn off 'nc	end	newpath	% on exit we have main and vars on top of dict stack} def/terminate	% - terminate -{	end	end} def% definition operators/_	% - _ nullnull def/ddef	% key value ddef -{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput	% key value literal xput -{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def	end} def/npop	% integer npop -{	{		pop	} repeat} def% marking operators/sw	% ax ay string sw x y{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj	% cx cy fillchar ax ay string swj x y{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss	% ax ay string matrix ss -{	4 1 roll	{		% matrix ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss	% cx cy fillchar ax ay string matrix jss -{	4 1 roll	{		% cx cy fillchar matrix ax ay char 0 0 {proc} -   		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def% path operators/sp	% ax ay string sp -{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp	% cx cy fillchar ax ay string jsp -{	{		% cx cy fillchar ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def% path construction operators/pl	% x y pl x y{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	% x1 y1 x2 y2 x3 y3 c -	{		curveto	} def	/C	/c load def	/v	% x2 y2 x3 y3 v -	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	% x1 y1 x2 y2 y -	{		2 copy curveto	} def	/Y	/y load def	/l	% x y l -	{		lineto	} def	/L	/l load def	/m	% x y m -	{		moveto	} def}{	% else	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse% graphic state operators/d	% array phase d -{	setdash} def/cf{} def	% - cf flatness/i	% flatness i -{	dup 0 eq	{		pop cf	} if	setflat} def/j	% linejoin j -{	setlinejoin} def/J	% linecap J -{	setlinecap} def/M	% miterlimit M -{	setmiterlimit} def/w	% linewidth w -{	setlinewidth} def% path painting operators/XR	% flag XR -{	0 ne	/_eo exch ddef} def/H	% - H -{} def/h	% - h -{	closepath} def/N	% - N -{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n	% - n -{	N} def/F	% - F -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f	% - f -{	closepath	F} def/S	% - S -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s	% - s -{	closepath	S} def/B	% - B -{	_pola 0 eq	{		_doClip 1 eq	% F clears _doClip		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b	% - b -{	closepath	B} def/W	% - W -{	/_doClip 1 ddef} def/*	% - [string] * -{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)	newpath} def% group operators/u	% - u -{} def/U	% - U -{} def/q	% - q -{	_pola 0 eq	{		gsave	} if} def/Q	% - Q -{	_pola 0 eq	{		grestore	} if} def/*u	% - *u -{	_pola 1 add /_pola exch ddef} def/*U	% - *U -{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D	% polarized D -{	pop} def/*w	% - *w -{} def/*W	% - *W -{} def% place operators/`	% matrix llx lly urx ury string ` -{	/_i save ddef% * special case of clipping forward without rendering	% use 'nulldevice if true	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~	% - ~ -{	end	_i restore} def% color operators/O	% flag O -{	0 ne	/_of exch ddef	/_lp /none ddef} def/R	% flag R -{	0 ne	/_os exch ddef	/_lp /none ddef} def/g	% gray g -{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G	% gray G -{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k	% cyan magenta yellow black k -{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K	% cyan magenta yellow black K -{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x	% cyan magenta yellow black name gray x -{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X	% cyan magenta yellow black name gray X -{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def% locked object operator/A	% value A -{	pop} def% annotate page operator/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def% object tag operator% joe holt November 20, 1994% /name (value) XT/XT {	pop pop} def% begin layer PostScript implementation% general purpose discard loop% works on early level 1 (v.23, v.38) PostScript printers% version 0.02 04/03/93% Bill Woodruff% constraints :% if nested discards must be handled% then the begin and end delimiting% strings must be of equal length% arguments% #nestingFlag% #nestingFlag = 0  				no nesting% #nestingFlag = 1  				nesting% non-nested case% note : since the non-nested case is invoked% after the ocurrence of a beginning string% we only have to look for the ending string% it is not necessary to specify a beginning string% 0 (endString) % nested case% (beginString) 1 (endString) % the discard procedure is defined in the main dictionary% it turns the discard dictionary on to execute the discard function/discard{	% test for version, hash a key	% get and execute the discard procedure from dictionary	% execute it in a stopped context so we can bail with 'stop	% wrap it in a save so we don't have to reset variables	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop	end	discardSave restore} bind def% build the discard dictionary which will contain only proceduresuserdict /discardDict 7 dict dup beginput% pre 38 initialization/pre38Initialize{	% used as buffer size for reading by byte technique		/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer} def% for <=38	/shiftBuffer{	% shift last chars of newBuff to start of newBuff	newBuff 0 newBuffButFirst putinterval	% new character into last byte of newBuff	newBuffLast 0	currentfile read not	{	stop	} if	put} def% discard procedures% no nesting, older ps0{	pre38Initialize	mark	% fill the buffer	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def% nesting, older ps1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def% no nesting, newer ps2{	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% end of layer ?		endString eq		{			cleartomark stop		} if	} loop} def% nesting, newer ps3{	/beginString exch store	/layerCnt 1 store	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% start of layer ?		dup beginString eq		{			% update layer counter			pop /layerCnt dup load 1 add store		}		{			% end of layer ?			endString eq			{				% stop if we're not nested				layerCnt 1 eq				{					cleartomark stop				}				{					% nested : decrement layer counter					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} def% end discard dictionaryend% define the dictionary for clipping without renderinguserdict /clipRenderOff 15 dict dup beginput% flag for marking this dictionary as active% so we can test in /` and wrap placed% elements in nulldevice% /clipForward? true def% re-define rendering primitives to clip and newpath% based on value of /_doClip flag{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall% modify 'Tr so Tj and Tx are never set up by% the calls to 'a0, 'e0, etc./Tr /pop load def% special case of 'cshow ?% is so, we'll have to overload toplevels% /patternashow /patternawidthshow% /patternashowstroke% /patternawidthshowstroke% /ss /jss /sp /jsp% perhaps we can bracket out patterns at a higher level ?% for example, by modifying 'E to pop off its parameters% call to 'show in 'patternpath ?% calls to 'ashow in '_psf ?% calls to 'awidthshow in '_pjsf ?% calls to 'widthshow in '_jss and '_jsp ?% disable gradient operators/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} def% end dictionary for clipping without renderingend/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	% #masks #printing 	% assume that	% masks = 1 masks forward, masks = 0 no masking or only local masking		% do the right thing for printing and masking layer	0 eq	{		% non-printing layer		0 eq		{			% no masking forward from this layer			% nested discard call			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			% masking forward from this layer			% no printing, but clip path must survive						% set the clipForward? flag in the vars dict			/clipForward? true def						% redefine Tx and Tj in the vars dict			/Tx /pop load def			/Tj /pop load def						% turn on the no rendering dictionary			currentdict end clipRenderOff begin begin		} ifelse	}	{		% printing layer		% encapsulate layer with 'save		% only if there is no masking forward		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def% end layer :% assume that if discardSave is non-null% then the layer was bracketed by 'save...restore% else we must test for clipping forward/LB	% ==> Lb ==> .....{	discardSave dup null ne	{		% undo the save		restore	}	{		pop		clipForward?		{			% assume dictionary stack :			%		vars						%		clipRenderOff						%		main			currentdict			end			end			begin			% dictionary stack :			%		vars						%		main								/clipForward? false ddef		} if	} ifelse} bind def% begin palette discard% assume no nesting/Pb	% topLeftCell selected Pb -{	pop pop	% non nested discard	0 (%AI5_EndPalette) discard} bind def% other type of discard% assume no nesting/Np{	0 (%AI5_End_NonPrinting--) discard} bind def% express layer name/Ln /pop load def	% ==> Ln ==> .....% path center-point flag operator/Ap	% value Ap -/pop load def% device-independent flatness/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def% multi-layer clipping/Mb{	q} def/Md{} def/MB{	Q} def% null color operators/nc 3 dict defnc begin/setgray	% gray setgray -{	pop} bind def/setcmykcolor	% cyan magenta yellow black setcmykcolor -{	4 npop} bind def/setcustomcolor	% object tint setcustomcolor -{	2 npop} bind def% exit 'nc dictionarycurrentdict readonly popend% exit main dictionary% currentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp8 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink, Yellow, Green)(Pink, Yellow, Green) 0 3 Bd[<0000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020203030303030303030303030303030303030303030304040404040404040404040404040404040404040505050505050505050505050505050505050506060606060606060606060606060606060606070707070707070707070707070707070707080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D><050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F101011111212131314141515161717181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F606162636364656666676869696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F8081828383848586878788898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8A9AAABACADADAEAFB0B1B2B2><CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7B7B6B6B5B4B4B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B7A7978777776757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A59585756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A19181817171616151414131312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202020201010101010000000000><00000000000000000000000001010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050505050505050505050505><BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>01 %_Br[0.05 0.7 0 0 1 50 100 %_Bs0 0.02 0.8 0 1 57 36 %_Bs0.45 0 0.75 0 1 37 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_Bs1 1 0 0 1 50 80 %_Bs1 0.0279 0 0 1 50 60 %_Bs1 0 1 0 1 50 40 %_Bs0 0 1 0 1 50 20 %_Bs0 1 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E5>01 %_Br[0 0 1 0 1 52 19 %_Bs0 0.55 0.9 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Purple Radial)(Yellow & Purple Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Pink, Yellow, Green) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Purple Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPcBb2 (Rainbow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPcBb2 (Steel Bar) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPcBb2 (Purple, Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPcBb2 (Green & Blue) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR4626 314.25 m(N) *-4014 314.25 m(N) *4626 707.25 m(N) *-4014 707.25 m(N) *295.75 -3924 m(N) *295.75 4716 m(N) *304.25 -3924 m(N) *304.25 4716 m(N) *uu0 O1 0.51 0 0.3 (PANTONE 541 CVC) 0 x7.1714 663.0269 m255.5659 663.0269 l255.5659 663.7769 l7.1714 663.7769 l7.1714 663.0269 lf7.1714 658.1509 m255.5659 658.1509 l255.5659 661.1509 l7.1714 661.1509 l7.1714 658.1509 lfUu*u19.3271 689.4917 m19.457 685.9819 19.3921 682.2769 22.187 680.7163 c22.187 680.5864 7.1714 680.7163 y10.0317 682.2769 9.9668 685.9819 10.0967 689.4917 c10.2266 696.2524 10.2915 701.9722 10.0967 709.2534 c9.9668 712.7622 10.0317 716.4673 7.1714 718.0278 c13.1519 718.0278 16.6621 718.0933 v19.9121 718.1577 24.7871 718.2876 y28.0376 718.4175 34.3428 718.938 37.4629 713.478 c39.478 710.0972 39.2827 705.2222 37.0728 701.4526 c34.3428 696.7075 30.3125 696.6421 26.7373 696.8374 c26.3472 696.8374 24.2021 697.0327 21.7319 697.9419 c21.7319 698.3325 L24.9824 699.2417 28.0376 700.7368 29.9873 704.312 c30.4424 705.1577 30.8975 706.8472 30.8975 708.1479 c30.8975 709.9673 30.1826 711.853 29.0776 712.9585 c26.3472 715.6226 22.5122 715.9478 20.042 715.4937 c19.522 713.8677 19.457 712.7622 19.3271 709.2534 c19.1318 701.9722 19.1968 696.2524 19.3271 689.4917 cf*U*u63.8545 706.8179 m65.3047 704.9175 65.1045 702.4673 64.5547 700.9673 c63.6045 698.2671 60.5542 696.4175 58.4541 695.7173 c62.2041 689.6167 66.1045 684.7671 v67.5044 683.0669 68.7544 681.7163 70.1045 680.4663 c65.6543 680.4663 L60.5039 680.4663 60.604 680.0669 56.3037 686.6167 c52.2534 692.8169 L51.4536 694.0669 51.2534 694.4673 50.4536 694.3169 c50.4536 687.4673 L50.4536 683.1167 50.7534 681.6665 52.4038 680.7163 c40.853 680.7163 L43.0532 681.9165 43.0034 684.7671 43.103 687.4673 c43.2534 693.0669 43.2031 697.4175 43.103 702.6675 c43.0034 705.3687 43.0532 708.2183 40.853 709.4185 c45.9033 709.4185 48.6035 709.4683 v52.9038 709.519 55.2539 709.6685 y57.1538 709.7183 61.6543 709.7183 63.8545 706.8179 cf1 D54.4038 696.3677 m56.2539 696.8677 57.2041 698.0171 57.7041 699.7681 c58.2041 701.3687 58.2041 704.4683 56.7041 705.9683 c54.9038 707.8687 52.1538 707.7681 50.4536 707.2681 c50.4536 696.3677 l51.8037 696.1675 52.9038 696.0171 54.4038 696.3677 cf*U*u0 D80.7798 702.6675 m80.6299 697.0679 80.6797 692.6675 80.7798 687.4673 c80.8799 684.7671 80.8296 681.9165 82.98 680.7163 c71.4292 680.7163 L73.6294 681.9165 73.5796 684.7671 73.6797 687.4673 c73.7793 692.6675 73.8296 697.0679 73.6797 702.6675 c73.5796 705.3687 73.6294 708.2183 71.4292 709.4185 c82.98 709.4185 l80.8296 708.2183 80.8799 705.3687 80.7798 702.6675 cf*U*u109.8335 689.1665 m109.8335 702.6187 L109.8335 704.8179 109.4336 708.269 107.2832 709.4185 c116.1338 709.4185 L114.1836 708.3687 113.6836 704.8687 113.6338 703.0679 c113.1836 680.3667 L106.6333 680.3667 L91.5322 701.3687 L91.5322 688.4673 L91.5322 686.1167 91.5322 683.1167 94.4326 680.7163 c85.2822 680.6665 85.2822 680.7163 v87.4819 681.9165 87.4321 684.7671 87.5322 687.4673 c87.6323 692.6675 87.6821 697.0679 87.5322 702.6675 c87.4321 705.3687 87.4819 708.2183 85.2822 709.4185 c95.1826 709.4185 L109.8335 689.1665 lf*U*u141.5835 702.9175 m141.5835 702.5181 141.3833 702.4673 141.2329 702.7173 c138.4829 706.2681 136.7827 707.4683 133.2827 707.1685 c130.8823 706.9683 128.9824 705.5679 127.6821 702.7681 c125.8823 699.2671 125.832 691.9673 128.1323 688.2173 c130.0825 685.2163 132.6323 684.2163 135.3325 684.2163 c137.6328 684.2671 139.9331 685.2163 142.1333 686.7671 c142.2827 686.8667 142.3833 687.0171 142.5327 686.9673 c142.6333 686.9165 142.6333 686.8169 142.5835 686.7173 c142.0327 683.9165 141.5835 682.9663 138.4829 681.6665 c134.8325 680.0161 129.4326 679.8667 125.2319 682.3169 c121.0317 684.7163 119.1318 689.2671 118.7817 692.7671 c118.3813 696.0171 119.2817 702.4175 122.9819 705.8687 c127.332 709.9683 132.4824 710.0679 138.333 709.269 c138.7832 709.2183 140.583 709.1685 141.5835 709.519 C141.5835 702.9175 lf*U*u162.2896 691.3667 m162.0894 691.4175 161.8394 692.2671 161.2886 692.8667 c159.439 694.7671 156.689 694.7173 153.7388 694.7173 c153.7388 683.2671 L156.5884 682.8667 161.8394 682.2661 164.7896 685.4165 c165.4897 686.1665 166.0396 687.0171 166.3892 687.7671 c166.5894 687.9165 166.7397 687.8667 v166.939 687.8667 166.939 687.6665 166.8892 687.4673 c165.3892 681.1167 L165.2896 680.6167 165.0396 680.6167 163.8394 680.5669 c160.7388 680.3169 156.8384 680.5669 152.4888 680.6665 c149.0874 680.7163 144.7378 680.7163 y146.938 681.9165 146.8882 684.7671 146.9878 687.4673 c147.0874 692.6675 147.1382 697.0679 146.9878 702.6675 c146.8882 705.3687 146.938 708.2183 144.7378 709.4185 c146.7378 709.4185 149.4888 709.4185 v153.1382 709.4185 158.189 709.769 161.4888 709.6187 c163.2896 709.519 164.2397 709.519 164.5894 709.3179 c164.7397 709.2183 164.7896 709.019 164.7896 708.7183 c164.7896 703.6187 L164.7896 703.4683 164.7896 703.3179 164.689 703.3179 c164.5894 703.2183 164.439 703.3687 y161.8394 707.4185 159.439 707.7183 156.189 707.6685 c155.2388 707.6685 154.439 707.6187 153.7388 707.5679 c153.7388 696.5679 L156.689 696.5679 159.5894 696.5171 161.2886 698.4673 c161.8394 699.1177 162.1392 699.9673 162.2896 699.9673 c162.439 699.9673 162.439 699.8179 162.439 699.6675 c162.439 691.6675 l162.439 691.4673 162.439 691.3169 162.2896 691.3667 cf*U*u192.2739 702.6675 m191.8237 703.6187 190.9243 704.4683 190.7739 704.5679 c188.6733 706.4185 186.4731 706.7681 183.8237 706.7681 c183.5229 705.5679 183.5229 705.3687 183.4233 702.6675 c183.2729 697.0679 183.3237 692.6675 183.4233 687.4673 c183.5229 684.7671 183.4731 681.9165 185.6235 680.7163 c174.1226 680.7163 L176.2729 681.9165 176.2231 684.7671 176.3228 687.4673 c176.4233 692.6675 176.4731 697.0679 176.3228 702.6675 c176.2231 705.3687 176.1733 705.6187 175.9233 706.7681 c173.2729 706.7681 171.0728 706.4185 168.9731 704.5679 c168.8228 704.4683 167.9224 703.6187 167.4731 702.6675 c167.4731 709.4185 L192.2739 709.4185 L192.2739 702.6675 lf*U*u219.1499 705.3179 m222.5005 701.4673 222.6499 694.4673 221.5503 690.5669 c220.1001 685.4663 217.9507 682.8667 212.7495 681.2163 c208.7495 679.9663 200.2485 680.0161 195.9985 683.4165 c191.6479 686.9673 191.1978 692.5171 191.5483 696.4175 c191.8979 700.2681 193.5483 705.3687 198.3481 707.8687 c199.7983 708.6187 201.2993 709.3687 205.5493 709.6187 c208.2993 709.769 215.2495 709.8179 219.1499 705.3179 cf1 D203.0991 684.2671 m204.9985 682.7661 207.2993 682.5161 209.2495 683.2671 c212.7495 684.5669 213.8491 688.4165 214.2495 691.0171 c214.8003 694.2173 214.3491 702.7173 210.5991 705.8179 c208.8999 707.1685 206.8491 707.4683 204.6499 706.7681 c200.8491 705.6187 199.6489 700.4175 199.3491 698.3677 c198.9985 695.8677 198.8989 687.6167 203.0991 684.2671 cf*U*u0 D249.0063 689.1665 m249.0063 702.6187 L249.0063 704.8179 248.6069 708.269 246.4565 709.4185 c255.3071 709.4185 L253.3569 708.3687 252.8569 704.8687 252.8062 703.0679 c252.3569 680.3667 L245.8062 680.3667 L230.7056 701.3687 L230.7056 688.4673 L230.7056 686.1167 230.7056 683.1167 233.606 680.7163 c224.4556 680.6665 224.4556 680.7163 v226.6558 681.9165 226.605 684.7671 226.7056 687.4673 c226.8052 692.6675 226.855 697.0679 226.7056 702.6675 c226.605 705.3687 226.6558 708.2183 224.4556 709.4185 c234.356 709.4185 L249.0063 689.1665 lf*UUu*u75.2241 637.7729 m75.2241 637.5776 75.2241 637.4478 75.0293 637.3833 c74.8345 637.3179 74.7041 637.5776 74.5742 637.7729 c72.4292 640.9585 69.8291 643.1675 66.9688 643.4927 c65.4087 643.688 63.1338 643.688 61.5737 642.2583 c60.4688 641.1528 60.0786 640.0483 60.2734 638.6831 c60.5986 635.6274 63.0039 633.8081 66.4492 631.5972 c68.5938 630.2329 L73.729 626.9175 77.2393 623.7974 77.0444 618.7271 c76.8491 615.4116 75.1592 612.3569 70.999 610.146 c65.7988 607.4165 55.5933 608.1323 51.2383 610.6665 c50.0034 611.3823 50.1333 612.0317 50.1333 613.1372 c50.1333 619.8325 L50.1333 620.3521 50.4585 620.7417 50.7183 620.0269 c52.2783 615.9966 53.3833 613.3325 58.1938 611.9663 c60.0137 611.4468 63.2637 611.3169 65.2139 612.9419 c66.5791 613.9819 67.0991 615.3462 67.0337 616.7769 c66.9038 619.4419 64.6938 621.0669 61.4438 623.2124 c59.0386 624.7729 L53.9683 628.0874 50.8486 630.4272 50.5234 635.1733 c50.3931 637.3833 50.8486 641.0229 53.3833 643.2983 c57.3486 646.938 65.7988 646.5483 69.6992 645.9624 c71.3242 645.7036 72.2993 645.5737 v73.5991 645.4429 74.6392 645.4429 75.4194 645.5083 c75.2891 640.6333 75.2241 637.7729 vf*U*u88.5947 615.4673 m88.6948 612.7671 88.645 609.9165 90.7949 608.7163 c90.7949 608.6167 79.2441 608.7163 y81.4443 609.9165 81.3945 612.7671 81.4946 615.4673 c81.5942 620.6675 81.6445 625.0679 81.4946 630.6675 c81.3945 633.3677 81.4443 636.2183 79.2441 637.4185 c83.8447 637.4185 86.5449 637.4683 v89.0449 637.519 92.7949 637.6187 y95.2954 637.7183 100.1455 638.1187 102.5459 633.9175 c104.0957 631.3179 103.9458 627.5679 102.2456 624.6675 c100.1455 621.0171 97.0454 620.9673 94.2954 621.1177 c93.9951 621.1177 92.3452 621.2671 90.4448 621.9673 c90.4448 622.2671 L92.9453 622.9673 95.2954 624.1177 96.7954 626.8677 c97.1455 627.5171 97.4956 628.8179 97.4956 629.8179 c97.4956 631.2183 96.9453 632.6675 96.0952 633.5181 c93.9951 635.5679 91.0449 635.8179 89.145 635.4683 c88.7451 634.2183 88.6948 633.3677 88.5947 630.6675 c88.4448 625.0679 88.4951 620.6675 88.5947 615.4673 cf*U*u133.3584 633.3179 m136.7085 629.4673 136.8589 622.4673 135.7588 618.5669 c134.3086 613.4663 132.1587 610.8667 126.958 609.2163 c122.958 607.9663 114.4575 608.0161 110.207 611.4165 c105.8569 614.9673 105.4067 620.5171 105.7568 624.4175 c106.1069 628.2681 107.7568 633.3677 112.5576 635.8677 c114.0073 636.6177 115.5073 637.3677 119.7578 637.6187 c122.5078 637.769 129.4585 637.8179 133.3584 633.3179 cf1 D117.3076 612.2671 m119.2075 610.7661 121.5078 610.5161 123.458 611.2671 c126.958 612.5669 128.0581 616.4165 128.458 619.0171 c129.0083 622.2173 128.5581 630.7173 124.8081 633.8179 c123.1079 635.1685 121.0576 635.4683 118.8574 634.7681 c115.0576 633.6177 113.8574 628.4175 113.5576 626.3677 c113.2075 623.8677 113.1074 615.6167 117.3076 612.2671 cf*U*u0 D161.6646 634.8179 m163.1147 632.9175 162.9146 630.4673 162.3647 628.9673 c161.4146 626.2671 158.3647 624.4175 156.2642 623.7173 c160.0142 617.6167 163.9146 612.7671 v165.3149 611.0669 166.5649 609.7163 167.9155 608.4663 c163.4653 608.4663 L158.3149 608.4663 158.4146 608.0669 154.1147 614.6167 c150.064 620.8169 L149.2642 622.0669 149.064 622.4673 148.2642 622.3169 c148.2642 615.4673 L148.2642 611.1167 148.564 609.6665 150.2144 608.7163 c138.6636 608.7163 L140.8638 609.9165 140.8135 612.7671 140.9136 615.4673 c141.0635 621.0669 141.0137 625.4175 140.9136 630.6675 c140.8135 633.3677 140.8638 636.2183 138.6636 637.4185 c143.7144 637.4185 146.4146 637.4683 v150.7144 637.519 153.0649 637.6685 y154.9644 637.7183 159.4644 637.7183 161.6646 634.8179 cf1 D152.2144 624.3677 m154.0649 624.8677 155.0142 626.0171 155.5142 627.7681 c156.0142 629.3677 156.0142 632.4683 154.5142 633.9683 c152.7144 635.8677 149.9644 635.7681 148.2642 635.2681 c148.2642 624.3677 l149.6147 624.1675 150.7144 624.0171 152.2144 624.3677 cf*U*u0 D190.8745 630.6675 m190.4253 631.6177 189.5249 632.4683 189.3745 632.5679 c187.2749 634.4185 185.0747 634.7681 182.4243 634.7681 c182.1245 633.5679 182.1245 633.3677 182.0249 630.6675 c181.8745 625.0679 181.9243 620.6675 182.0249 615.4673 c182.1245 612.7671 182.0747 609.9165 184.2241 608.7163 c172.7241 608.7163 L174.8735 609.9165 174.8237 612.7671 174.9243 615.4673 c175.0239 620.6675 175.0737 625.0679 174.9243 630.6675 c174.8237 633.3677 174.7739 633.6177 174.5239 634.7681 c171.8735 634.7681 169.6733 634.4185 167.5737 632.5679 c167.4233 632.4683 166.5229 631.6177 166.0737 630.6675 c166.0737 637.4185 L190.8745 637.4185 L190.8745 630.6675 lf*U*u211.0972 631.0679 m211.0972 630.9175 211.0972 630.8179 210.9478 630.7681 c210.7974 630.7173 210.6978 630.9175 210.5972 631.0679 c208.9478 633.5181 206.9478 635.2183 204.7476 635.4683 c203.5474 635.6177 201.7974 635.6177 200.5972 634.5181 c199.7466 633.6675 199.4468 632.8179 199.5972 631.7681 c199.8472 629.4175 201.6968 628.0181 204.3472 626.3179 c205.9976 625.2671 L209.9478 622.7173 212.6479 620.3169 212.4976 616.4165 c212.3481 613.8667 211.0474 611.5171 207.8472 609.8169 c203.8472 607.7163 195.9966 608.2661 192.646 610.2163 c191.6968 610.7661 191.7964 611.2671 191.7964 612.1167 c191.7964 617.2671 L191.7964 617.6665 192.0464 617.9673 192.2456 617.4165 c193.4468 614.3169 194.2964 612.2671 197.9966 611.2163 c199.397 610.8169 201.897 610.7163 203.397 611.9663 c204.4468 612.7671 204.8472 613.8169 204.7974 614.9165 c204.6968 616.9673 202.9976 618.2173 200.4966 619.8667 c198.647 621.0669 L194.7456 623.6177 192.3462 625.4175 192.0962 629.0679 c191.9956 630.7681 192.3462 633.5679 194.2964 635.3179 c197.3472 638.1187 203.8472 637.8179 206.8472 637.3677 c208.0972 637.1685 208.8472 637.0679 v209.8472 636.9683 210.6479 636.9683 211.2476 637.019 c211.1479 633.2681 211.0972 631.0679 vf*UUu132.6299 644.1548 m147.6294 644.1548 159.7886 650.7417 159.7886 658.8657 c159.7886 666.9907 147.6294 673.5767 132.6299 673.5767 c117.6304 673.5767 105.4712 666.9907 105.4712 658.8657 c105.4712 650.7417 117.6304 644.1548 132.6299 644.1548 cf1 g130.2729 644.4321 m145.2729 644.4321 157.4321 651.019 157.4321 659.1431 c157.4321 667.2671 145.2729 673.854 130.2729 673.854 c115.2734 673.854 103.1143 667.2671 103.1143 659.1431 c103.1143 651.019 115.2734 644.4321 130.2729 644.4321 cf155.5571 659.1431 m155.5571 661.105 154.644 663.0132 152.8433 664.813 c148.4243 669.2329 139.7754 671.979 130.2729 671.979 c126.3018 671.979 122.4854 671.4937 119.0586 670.6128 C115.0571 669.3276 111.6968 667.4731 109.4097 665.186 c107.4307 663.2075 106.4272 661.0806 106.4272 658.8657 c106.4272 656.6509 107.4307 654.5239 109.4097 652.5454 c110.3101 651.645 111.3818 650.814 112.5884 650.0562 C117.2617 647.687 123.5493 646.3071 130.2729 646.3071 c143.978 646.3071 155.5571 652.1851 155.5571 659.1431 cn0 O1 0.51 0 0.3 (PANTONE 541 CVC) 0 x106.4272 658.8657 m106.4272 661.0806 107.4307 663.2075 109.4097 665.186 c111.6968 667.4731 115.0571 669.3276 119.0586 670.6128 C114.2861 669.3862 110.2749 667.3862 107.7021 664.813 c105.9019 663.0132 104.9893 661.105 104.9893 659.1431 c104.9893 657.1802 105.9019 655.2729 107.7021 653.4722 c108.9946 652.1792 110.6572 651.0356 112.5884 650.0562 C111.3818 650.814 110.3101 651.645 109.4097 652.5454 c107.4307 654.5239 106.4272 656.6509 106.4272 658.8657 cf160.7456 658.8657 m160.7456 661.5679 159.52 664.2202 157.2026 666.5376 c155.7329 668.0083 153.8579 669.3071 151.689 670.4126 C153.1343 669.522 154.4214 668.5396 155.4956 667.4653 c157.9897 664.9712 159.3071 662.0933 159.3071 659.1431 c159.3071 656.1919 157.9897 653.314 155.4956 650.8208 c152.8755 648.2007 149.0444 646.0962 144.5229 644.6636 C149.8071 646.0278 154.2905 648.2808 157.2026 651.1929 c159.52 653.5103 160.7456 656.1636 160.7456 658.8657 cf1 g108.0571 651.1929 m105.7397 653.5103 104.5146 656.1636 104.5146 658.8657 c104.5146 667.5044 117.127 674.5327 132.6299 674.5327 c139.8081 674.5327 146.5806 673.019 151.689 670.4126 C146.2788 673.7505 138.5288 675.729 130.2729 675.729 c113.9922 675.729 101.2393 668.4429 101.2393 659.1431 c101.2393 656.1919 102.5571 653.314 105.0503 650.8208 c110.1479 645.7231 119.8125 642.5571 130.2729 642.5571 c135.3574 642.5571 140.2485 643.3101 144.5229 644.6636 C140.8604 643.7192 136.8164 643.1987 132.6299 643.1987 c122.4043 643.1987 112.9883 646.2622 108.0571 651.1929 cf158.8325 658.8657 m158.8325 661.0806 157.8296 663.2075 155.8511 665.186 c151.2642 669.771 142.3667 672.6206 132.6299 672.6206 c127.7495 672.6206 123.0801 671.9038 119.0586 670.6128 C122.4854 671.4937 126.3018 671.979 130.2729 671.979 c139.7754 671.979 148.4243 669.2329 152.8433 664.813 c154.644 663.0132 155.5571 661.105 155.5571 659.1431 c155.5571 652.1851 143.978 646.3071 130.2729 646.3071 c123.5493 646.3071 117.2617 647.687 112.5884 650.0562 C117.5269 646.9536 124.8047 645.1108 132.6299 645.1108 c147.0776 645.1108 158.8325 651.2808 158.8325 658.8657 cf*u1 D159.3071 659.1431 m159.3071 662.0933 157.9897 664.9712 155.4956 667.4653 c154.4214 668.5396 153.1343 669.522 151.689 670.4126 C146.5806 673.019 139.8081 674.5327 132.6299 674.5327 c117.127 674.5327 104.5146 667.5044 104.5146 658.8657 c104.5146 656.1636 105.7397 653.5103 108.0571 651.1929 c112.9883 646.2622 122.4043 643.1987 132.6299 643.1987 c136.8164 643.1987 140.8604 643.7192 144.5229 644.6636 C149.0444 646.0962 152.8755 648.2007 155.4956 650.8208 c157.9897 653.314 159.3071 656.1919 159.3071 659.1431 cf0 D112.5884 650.0562 m110.6572 651.0356 108.9946 652.1792 107.7021 653.4722 c105.9019 655.2729 104.9893 657.1802 104.9893 659.1431 c104.9893 661.105 105.9019 663.0132 107.7021 664.813 c110.2749 667.3862 114.2861 669.3862 119.0586 670.6128 C123.0801 671.9038 127.7495 672.6206 132.6299 672.6206 c142.3667 672.6206 151.2642 669.771 155.8511 665.186 c157.8296 663.2075 158.8325 661.0806 158.8325 658.8657 c158.8325 651.2808 147.0776 645.1108 132.6299 645.1108 c124.8047 645.1108 117.5269 646.9536 112.5884 650.0562 Cf*Uu*u1 0.51 0 0.3 (PANTONE 541 CVC) 0 x116.416 662.2896 m116.416 662.7612 116.3174 663.1929 115.9639 663.1929 c115.7676 663.1929 115.5122 663.1733 115.0801 663.0552 c114.1177 662.7798 L114.0195 662.7612 113.9409 662.7612 113.9019 662.8394 c113.7642 663.2319 L113.7246 663.3101 113.7446 663.3892 113.8823 663.4673 c118.6548 665.8052 L118.792 665.8647 118.8906 665.9233 119.0278 665.9233 c119.146 665.9233 119.2046 665.7856 119.2046 665.6284 c119.2046 665.4712 119.146 662.3872 119.146 659.854 c119.146 659.0288 L119.146 658.0073 119.1655 654.6294 119.1655 654.4136 c119.1851 653.3921 119.2637 653.2544 120.2456 653.2544 c120.9526 653.2544 L121.0903 653.2544 121.1494 653.1958 121.1494 653.0972 c121.1494 652.5864 L121.1494 652.4888 121.0903 652.4497 120.9331 652.4497 c120.7954 652.4497 118.1245 652.5083 117.7905 652.5083 c117.2212 652.5083 114.4517 652.4497 114.3535 652.4497 c114.2354 652.4497 114.1963 652.4888 114.1963 652.5864 c114.1963 653.1167 L114.1963 653.2349 114.314 653.2544 114.4712 653.2544 c114.9819 653.2544 L116.062 653.2544 116.3569 653.313 116.396 654.3149 c116.4355 655.1401 116.416 657.3003 116.416 658.0073 C116.416 662.2896 lf*U*u128.3569 664.4702 m129.2603 663.2515 129.4565 661.9946 129.4565 661.3862 c129.4565 658.7339 128.376 655.7876 126.2744 654.021 c125.1548 653.0776 124.3105 652.646 123.1323 652.312 c122.9355 652.2534 122.6606 652.2134 122.5229 652.2134 c122.3657 652.2134 122.209 652.2729 122.209 652.5083 c122.209 652.646 122.3267 652.7827 122.4644 652.8423 c124.1143 653.4702 125.9604 655.5913 126.3726 658.3218 c126.2354 658.3218 L125.9404 658.0864 125.2534 657.7524 124.0747 657.7524 c121.7373 657.7524 120.8145 659.814 120.8145 661.2485 c120.8145 662.6821 121.4824 664.2144 122.2285 664.8423 c123.0732 665.5698 123.937 665.9233 125.0566 665.9233 c126.6675 665.9233 127.5708 665.5103 128.3569 664.4702 cf1 D123.3677 662.27 m123.3677 660.3247 124.1729 658.8911 125.2334 658.8911 c125.6855 658.8911 126.0781 659.0288 126.3335 659.2837 c126.6479 659.6372 126.6284 660.855 126.6284 661.7593 c126.6284 663.5854 126.3335 665.1958 125.1157 665.1958 c123.957 665.1958 123.3677 664.0767 123.3677 662.27 cf*U*u0 D129.4946 653.7456 m129.4946 654.2563 129.8677 654.7466 130.3193 654.7671 c131.105 654.7671 131.439 654.1187 131.6157 653.7456 c131.7334 653.4907 132.0088 653.0581 132.8926 653.0581 c134.2871 653.0581 135.1709 654.354 135.1709 655.769 c135.1709 657.5366 134.2871 658.6753 132.4014 659.1079 c132.0088 659.2056 131.9497 659.2837 131.9497 659.48 c131.9497 659.7163 132.0088 659.7954 132.2832 659.854 c133.8154 660.1489 134.7778 660.9937 134.7778 662.5054 c134.7778 663.4087 134.2085 664.4106 132.9902 664.4106 c131.8906 664.4106 131.1836 663.5854 130.771 662.564 c130.6729 662.3286 130.5942 662.3091 130.5356 662.3286 c130.1426 662.4458 L130.0444 662.4663 130.0249 662.564 130.064 662.7417 c130.3389 664.0962 131.5176 665.9233 133.9922 665.9233 c136.3687 665.9233 137.3706 664.4106 137.4297 663.2319 c137.4297 661.6812 136.2314 660.6401 134.9155 659.9331 c134.9155 659.8931 L136.4668 659.6372 138.0972 658.2827 138.0972 656.5542 c138.0972 654.2563 135.8384 652.2134 132.5586 652.2134 c130.1426 652.2134 129.4946 653.1958 129.4946 653.7456 cf*U*u140.021 653.5093 m138.9409 654.9429 138.8228 656.3179 138.8228 657.3794 c138.8228 660.0503 140.0996 662.1909 141.376 663.4673 c142.6919 664.7642 143.9888 665.3726 145.2261 665.7456 c145.7563 665.9038 146.0112 665.9233 146.1294 665.9233 c146.2476 665.9233 146.4233 665.8247 146.4233 665.687 c146.4233 665.5103 146.3257 665.353 145.9722 665.2163 c144.4009 664.6265 142.2798 662.3091 141.769 659.9331 c141.8862 659.8735 L142.2993 660.2661 143.1636 660.6401 144.0474 660.6401 c146.4829 660.6401 147.4644 658.7144 147.4644 656.9868 c147.4644 655.2583 146.9146 654.1577 146.188 653.4907 c145.2847 652.646 144.4399 652.2134 142.9272 652.2134 c141.5327 652.2134 140.6494 652.6851 140.021 653.5093 cf1 D144.7739 655.9839 m144.7739 657.8501 144.2241 659.3628 143.0854 659.3628 c142.5151 659.3628 142.1616 659.2837 141.9263 659.0288 c141.5327 658.6362 141.5327 657.7915 141.5327 656.4165 c141.5327 655.2778 141.7886 652.9399 143.1235 652.9399 c143.8511 652.9399 144.7739 653.2349 144.7739 655.9839 cf*UU*u130.2729 644.0571 m140.3501 644.0571 149.6089 647.0542 154.4351 651.8813 c156.6411 654.0874 157.8071 656.5981 157.8071 659.1431 c157.8071 661.687 156.6411 664.1987 154.4351 666.4048 c149.6089 671.231 140.3501 674.229 130.2729 674.229 c115.0908 674.229 102.7393 667.4614 102.7393 659.1431 c102.7393 656.5981 103.9053 654.0874 106.1113 651.8813 c110.9375 647.0542 120.1958 644.0571 130.2729 644.0571 cf0 D103.4893 659.1431 m103.4893 661.4839 104.5791 663.812 106.6416 665.8745 c111.3325 670.5649 120.3872 673.479 130.2729 673.479 c140.1587 673.479 149.2144 670.5649 153.9038 665.8745 c155.9663 663.812 157.0571 661.4839 157.0571 659.1431 c157.0571 651.2378 145.0415 644.8071 130.2729 644.8071 c120.3872 644.8071 111.3325 647.7202 106.6416 652.4116 c104.5791 654.4741 103.4893 656.8022 103.4893 659.1431 cf*U132.6299 644.1548 m147.6294 644.1548 159.7886 650.7417 159.7886 658.8657 c159.7886 666.9907 147.6294 673.5767 132.6299 673.5767 c117.6304 673.5767 105.4712 666.9907 105.4712 658.8657 c105.4712 650.7417 117.6304 644.1548 132.6299 644.1548 cf1 g130.2729 644.4321 m145.2729 644.4321 157.4321 651.019 157.4321 659.1431 c157.4321 667.2671 145.2729 673.854 130.2729 673.854 c115.2734 673.854 103.1143 667.2671 103.1143 659.1431 c103.1143 651.019 115.2734 644.4321 130.2729 644.4321 cf155.5571 659.1431 m155.5571 661.105 154.644 663.0132 152.8433 664.813 c148.4243 669.2329 139.7754 671.979 130.2729 671.979 c126.3018 671.979 122.4854 671.4937 119.0586 670.6128 C115.0571 669.3276 111.6968 667.4731 109.4097 665.186 c107.4307 663.2075 106.4272 661.0806 106.4272 658.8657 c106.4272 656.6509 107.4307 654.5239 109.4097 652.5454 c110.3101 651.645 111.3818 650.814 112.5884 650.0562 C117.2617 647.687 123.5493 646.3071 130.2729 646.3071 c143.978 646.3071 155.5571 652.1851 155.5571 659.1431 cn0 O1 0.51 0 0.3 (PANTONE 541 CVC) 0 x106.4272 658.8657 m106.4272 661.0806 107.4307 663.2075 109.4097 665.186 c111.6968 667.4731 115.0571 669.3276 119.0586 670.6128 C114.2861 669.3862 110.2749 667.3862 107.7021 664.813 c105.9019 663.0132 104.9893 661.105 104.9893 659.1431 c104.9893 657.1802 105.9019 655.2729 107.7021 653.4722 c108.9946 652.1792 110.6572 651.0356 112.5884 650.0562 C111.3818 650.814 110.3101 651.645 109.4097 652.5454 c107.4307 654.5239 106.4272 656.6509 106.4272 658.8657 cf160.7456 658.8657 m160.7456 661.5679 159.52 664.2202 157.2026 666.5376 c155.7329 668.0083 153.8579 669.3071 151.689 670.4126 C153.1343 669.522 154.4214 668.5396 155.4956 667.4653 c157.9897 664.9712 159.3071 662.0933 159.3071 659.1431 c159.3071 656.1919 157.9897 653.314 155.4956 650.8208 c152.8755 648.2007 149.0444 646.0962 144.5229 644.6636 C149.8071 646.0278 154.2905 648.2808 157.2026 651.1929 c159.52 653.5103 160.7456 656.1636 160.7456 658.8657 cf1 g108.0571 651.1929 m105.7397 653.5103 104.5146 656.1636 104.5146 658.8657 c104.5146 667.5044 117.127 674.5327 132.6299 674.5327 c139.8081 674.5327 146.5806 673.019 151.689 670.4126 C146.2788 673.7505 138.5288 675.729 130.2729 675.729 c113.9922 675.729 101.2393 668.4429 101.2393 659.1431 c101.2393 656.1919 102.5571 653.314 105.0503 650.8208 c110.1479 645.7231 119.8125 642.5571 130.2729 642.5571 c135.3574 642.5571 140.2485 643.3101 144.5229 644.6636 C140.8604 643.7192 136.8164 643.1987 132.6299 643.1987 c122.4043 643.1987 112.9883 646.2622 108.0571 651.1929 cf158.8325 658.8657 m158.8325 661.0806 157.8296 663.2075 155.8511 665.186 c151.2642 669.771 142.3667 672.6206 132.6299 672.6206 c127.7495 672.6206 123.0801 671.9038 119.0586 670.6128 C122.4854 671.4937 126.3018 671.979 130.2729 671.979 c139.7754 671.979 148.4243 669.2329 152.8433 664.813 c154.644 663.0132 155.5571 661.105 155.5571 659.1431 c155.5571 652.1851 143.978 646.3071 130.2729 646.3071 c123.5493 646.3071 117.2617 647.687 112.5884 650.0562 C117.5269 646.9536 124.8047 645.1108 132.6299 645.1108 c147.0776 645.1108 158.8325 651.2808 158.8325 658.8657 cf*u1 D159.3071 659.1431 m159.3071 662.0933 157.9897 664.9712 155.4956 667.4653 c154.4214 668.5396 153.1343 669.522 151.689 670.4126 C146.5806 673.019 139.8081 674.5327 132.6299 674.5327 c117.127 674.5327 104.5146 667.5044 104.5146 658.8657 c104.5146 656.1636 105.7397 653.5103 108.0571 651.1929 c112.9883 646.2622 122.4043 643.1987 132.6299 643.1987 c136.8164 643.1987 140.8604 643.7192 144.5229 644.6636 C149.0444 646.0962 152.8755 648.2007 155.4956 650.8208 c157.9897 653.314 159.3071 656.1919 159.3071 659.1431 cf0 D112.5884 650.0562 m110.6572 651.0356 108.9946 652.1792 107.7021 653.4722 c105.9019 655.2729 104.9893 657.1802 104.9893 659.1431 c104.9893 661.105 105.9019 663.0132 107.7021 664.813 c110.2749 667.3862 114.2861 669.3862 119.0586 670.6128 C123.0801 671.9038 127.7495 672.6206 132.6299 672.6206 c142.3667 672.6206 151.2642 669.771 155.8511 665.186 c157.8296 663.2075 158.8325 661.0806 158.8325 658.8657 c158.8325 651.2808 147.0776 645.1108 132.6299 645.1108 c124.8047 645.1108 117.5269 646.9536 112.5884 650.0562 Cf*Uu*u1 0.51 0 0.3 (PANTONE 541 CVC) 0 x116.416 662.2896 m116.416 662.7612 116.3174 663.1929 115.9639 663.1929 c115.7676 663.1929 115.5122 663.1733 115.0801 663.0552 c114.1177 662.7798 L114.0195 662.7612 113.9409 662.7612 113.9019 662.8394 c113.7642 663.2319 L113.7246 663.3101 113.7446 663.3892 113.8823 663.4673 c118.6548 665.8052 L118.792 665.8647 118.8906 665.9233 119.0278 665.9233 c119.146 665.9233 119.2046 665.7856 119.2046 665.6284 c119.2046 665.4712 119.146 662.3872 119.146 659.854 c119.146 659.0288 L119.146 658.0073 119.1655 654.6294 119.1655 654.4136 c119.1851 653.3921 119.2637 653.2544 120.2456 653.2544 c120.9526 653.2544 L121.0903 653.2544 121.1494 653.1958 121.1494 653.0972 c121.1494 652.5864 L121.1494 652.4888 121.0903 652.4497 120.9331 652.4497 c120.7954 652.4497 118.1245 652.5083 117.7905 652.5083 c117.2212 652.5083 114.4517 652.4497 114.3535 652.4497 c114.2354 652.4497 114.1963 652.4888 114.1963 652.5864 c114.1963 653.1167 L114.1963 653.2349 114.314 653.2544 114.4712 653.2544 c114.9819 653.2544 L116.062 653.2544 116.3569 653.313 116.396 654.3149 c116.4355 655.1401 116.416 657.3003 116.416 658.0073 C116.416 662.2896 lf*U*u128.3569 664.4702 m129.2603 663.2515 129.4565 661.9946 129.4565 661.3862 c129.4565 658.7339 128.376 655.7876 126.2744 654.021 c125.1548 653.0776 124.3105 652.646 123.1323 652.312 c122.9355 652.2534 122.6606 652.2134 122.5229 652.2134 c122.3657 652.2134 122.209 652.2729 122.209 652.5083 c122.209 652.646 122.3267 652.7827 122.4644 652.8423 c124.1143 653.4702 125.9604 655.5913 126.3726 658.3218 c126.2354 658.3218 L125.9404 658.0864 125.2534 657.7524 124.0747 657.7524 c121.7373 657.7524 120.8145 659.814 120.8145 661.2485 c120.8145 662.6821 121.4824 664.2144 122.2285 664.8423 c123.0732 665.5698 123.937 665.9233 125.0566 665.9233 c126.6675 665.9233 127.5708 665.5103 128.3569 664.4702 cf1 D123.3677 662.27 m123.3677 660.3247 124.1729 658.8911 125.2334 658.8911 c125.6855 658.8911 126.0781 659.0288 126.3335 659.2837 c126.6479 659.6372 126.6284 660.855 126.6284 661.7593 c126.6284 663.5854 126.3335 665.1958 125.1157 665.1958 c123.957 665.1958 123.3677 664.0767 123.3677 662.27 cf*U*u0 D129.4946 653.7456 m129.4946 654.2563 129.8677 654.7466 130.3193 654.7671 c131.105 654.7671 131.439 654.1187 131.6157 653.7456 c131.7334 653.4907 132.0088 653.0581 132.8926 653.0581 c134.2871 653.0581 135.1709 654.354 135.1709 655.769 c135.1709 657.5366 134.2871 658.6753 132.4014 659.1079 c132.0088 659.2056 131.9497 659.2837 131.9497 659.48 c131.9497 659.7163 132.0088 659.7954 132.2832 659.854 c133.8154 660.1489 134.7778 660.9937 134.7778 662.5054 c134.7778 663.4087 134.2085 664.4106 132.9902 664.4106 c131.8906 664.4106 131.1836 663.5854 130.771 662.564 c130.6729 662.3286 130.5942 662.3091 130.5356 662.3286 c130.1426 662.4458 L130.0444 662.4663 130.0249 662.564 130.064 662.7417 c130.3389 664.0962 131.5176 665.9233 133.9922 665.9233 c136.3687 665.9233 137.3706 664.4106 137.4297 663.2319 c137.4297 661.6812 136.2314 660.6401 134.9155 659.9331 c134.9155 659.8931 L136.4668 659.6372 138.0972 658.2827 138.0972 656.5542 c138.0972 654.2563 135.8384 652.2134 132.5586 652.2134 c130.1426 652.2134 129.4946 653.1958 129.4946 653.7456 cf*U*u140.021 653.5093 m138.9409 654.9429 138.8228 656.3179 138.8228 657.3794 c138.8228 660.0503 140.0996 662.1909 141.376 663.4673 c142.6919 664.7642 143.9888 665.3726 145.2261 665.7456 c145.7563 665.9038 146.0112 665.9233 146.1294 665.9233 c146.2476 665.9233 146.4233 665.8247 146.4233 665.687 c146.4233 665.5103 146.3257 665.353 145.9722 665.2163 c144.4009 664.6265 142.2798 662.3091 141.769 659.9331 c141.8862 659.8735 L142.2993 660.2661 143.1636 660.6401 144.0474 660.6401 c146.4829 660.6401 147.4644 658.7144 147.4644 656.9868 c147.4644 655.2583 146.9146 654.1577 146.188 653.4907 c145.2847 652.646 144.4399 652.2134 142.9272 652.2134 c141.5327 652.2134 140.6494 652.6851 140.021 653.5093 cf1 D144.7739 655.9839 m144.7739 657.8501 144.2241 659.3628 143.0854 659.3628 c142.5151 659.3628 142.1616 659.2837 141.9263 659.0288 c141.5327 658.6362 141.5327 657.7915 141.5327 656.4165 c141.5327 655.2778 141.7886 652.9399 143.1235 652.9399 c143.8511 652.9399 144.7739 653.2349 144.7739 655.9839 cf*UU*u130.2729 644.0571 m140.3501 644.0571 149.6089 647.0542 154.4351 651.8813 c156.6411 654.0874 157.8071 656.5981 157.8071 659.1431 c157.8071 661.687 156.6411 664.1987 154.4351 666.4048 c149.6089 671.231 140.3501 674.229 130.2729 674.229 c115.0908 674.229 102.7393 667.4614 102.7393 659.1431 c102.7393 656.5981 103.9053 654.0874 106.1113 651.8813 c110.9375 647.0542 120.1958 644.0571 130.2729 644.0571 cf0 D103.4893 659.1431 m103.4893 661.4839 104.5791 663.812 106.6416 665.8745 c111.3325 670.5649 120.3872 673.479 130.2729 673.479 c140.1587 673.479 149.2144 670.5649 153.9038 665.8745 c155.9663 663.812 157.0571 661.4839 157.0571 659.1431 c157.0571 651.2378 145.0415 644.8071 130.2729 644.8071 c120.3872 644.8071 111.3325 647.7202 106.6416 652.4116 c104.5791 654.4741 103.4893 656.8022 103.4893 659.1431 cf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
