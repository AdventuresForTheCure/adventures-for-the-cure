%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.5.8 (Build 9L31a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 756 231
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 756 231
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4294 0.2332 0.0202 0.3278 0.6737 0.1105 0.1933 0.0938 0.9580 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.19960326 0.21025406 0.20868239 sc
q
2.0087891 6.3498688 751.75885 219.06689 rc
21.377071 7.8839798 m
21.377071 62.217461 l
1.7957153 62.217461 l
1.7957153 67.011589 l
1.7957153 68.932793 2.4668934 70.566345 3.8092499 71.912254 c
5.1551576 73.254608 6.7887125 73.925781 8.7063646 73.925781 c
54.399742 73.925781 l
54.399742 62.217461 l
35.010159 62.217461 l
35.010159 7.8839798 l
21.377071 7.8839798 l
f
Q
q
0 0 756 230.39999 rc
61.807693 7.8839798 m
61.807693 67.011589 l
61.807693 68.932793 62.482426 70.566345 63.824783 71.912254 c
65.170685 73.254608 66.80069 73.925781 68.718346 73.925781 c
75.440781 73.925781 l
75.440781 49.351433 l
102.7034 49.351433 l
102.7034 73.925781 l
116.5247 73.925781 l
116.5247 7.8839798 l
102.7034 7.8839798 l
102.7034 37.256016 l
75.440781 37.256016 l
75.440781 7.8839798 l
61.807693 7.8839798 l
f
124.12781 7.8839798 m
124.12781 67.011589 l
124.12781 68.932793 124.79898 70.566345 126.1449 71.912254 c
127.48725 73.254608 129.1208 73.925781 131.03845 73.925781 c
172.12239 73.925781 l
172.12239 62.600983 l
137.56558 62.600983 l
137.56558 48.389061 l
163.29408 48.389061 l
163.29408 43.978455 l
163.29408 42.064354 162.62291 40.42725 161.27699 39.081337 c
159.93108 37.735435 158.30109 37.060711 156.37987 37.060711 c
137.56558 37.060711 l
137.56558 20.174721 l
172.12239 20.174721 l
172.12239 7.8839798 l
124.12781 7.8839798 l
f
0.80880445 0.11293202 0.14633402 sc
179.34201 28.427711 m
192.77977 28.427711 l
193.29117 24.588867 194.76135 21.900608 197.19748 20.359375 c
199.7579 18.569572 203.27362 17.678207 207.75877 17.678207 c
211.72192 17.678207 214.7298 18.377808 216.77885 19.787632 c
218.82434 21.193913 219.85065 23.239407 219.85065 25.931217 c
219.85065 30.025761 214.09058 33.353249 202.57402 35.910118 c
202.19048 36.105431 l
200.65282 36.485405 l
194.1257 37.895233 189.77191 39.37254 187.59857 40.90667 c
185.03815 42.312935 183.24478 44.36554 182.22205 47.050243 c
180.94006 49.351433 180.30438 52.29538 180.30438 55.878544 c
180.30438 62.149986 182.47772 67.0755 186.82796 70.662224 c
191.18173 74.121101 197.51709 75.846985 205.83759 75.846985 c
213.64313 75.846985 219.65889 74.050087 223.88483 70.470459 c
228.23151 66.500221 230.53622 61.315449 230.79547 54.923279 c
223.11421 54.923279 l
220.17026 54.923279 218.05728 56.26918 216.77885 58.953896 c
216.13608 60.228783 215.24472 61.315449 214.09058 62.217461 c
211.78586 63.87587 208.65015 64.710396 204.68344 64.710396 c
200.84457 64.710396 198.08884 64.007263 196.43042 62.600983 c
194.51277 61.191158 193.54684 59.206039 193.54684 56.645615 c
193.54684 53.186745 197.26141 50.629871 204.68344 48.964348 c
206.86032 48.32513 208.45837 47.941608 209.48111 47.817318 c
211.78586 47.050243 213.80293 46.442993 215.53238 45.995544 c
217.25827 45.544544 218.63614 45.185867 219.65889 44.937283 c
221.4487 44.170227 223.24205 43.403164 225.03186 42.636108 c
227.59229 41.098423 229.57742 39.109745 230.98367 36.680729 c
232.39352 33.99601 233.09666 31.048519 233.09666 27.852425 c
233.09666 20.938232 230.79547 15.561707 226.18956 11.726395 c
221.58008 8.139679 215.04941 6.3498611 206.60464 6.3498611 c
197.90063 6.3498611 191.36996 8.2000427 187.02328 11.911064 c
182.28595 15.622066 179.72554 21.129982 179.34201 28.427711 c
f
254.52463 74.121155 m
254.52463 32.838367 l
254.52463 27.721085 255.48347 23.946152 257.40466 21.513569 c
259.45016 19.208843 262.71375 18.058243 267.19177 18.058243 c
271.54556 18.058243 274.80557 19.208843 276.98602 21.513569 c
279.02795 23.814751 280.05426 27.593239 280.05426 32.838367 c
280.05426 74.121155 l
293.68735 74.121155 l
293.68735 31.304245 l
293.68735 23.11517 291.3826 16.911201 286.77313 12.681721 c
282.55429 8.4593353 276.02362 6.3499069 267.19177 6.3499069 c
258.36349 6.3499069 251.83282 8.4593353 247.61044 12.681721 c
243.00453 16.911201 240.6998 23.11517 240.6998 31.304245 c
240.6998 66.823425 l
240.6998 68.744629 241.37099 70.43856 242.71689 71.912308 c
244.05923 73.378952 245.69278 74.121155 247.61044 74.121155 c
254.52463 74.121155 l
f
301.09863 7.8839798 m
301.09863 67.011589 l
301.09863 68.932793 301.76981 70.566345 303.11569 71.912254 c
304.45807 73.254608 306.08807 73.925781 308.00928 73.925781 c
349.09326 73.925781 l
349.09326 62.600983 l
314.53641 62.600983 l
314.53641 48.389061 l
340.26495 48.389061 l
340.26495 43.978455 l
340.26495 42.064354 339.59375 40.42725 338.24786 39.081337 c
336.90195 37.735435 335.27194 37.060711 333.35074 37.060711 c
314.53641 37.060711 l
314.53641 7.8839798 l
301.09863 7.8839798 l
f
356.31638 7.8839798 m
356.31638 67.011589 l
356.31638 68.932793 356.98401 70.566345 358.32635 71.912254 c
359.67227 73.254608 361.30231 73.925781 363.22351 73.925781 c
404.311 73.925781 l
404.311 62.600983 l
369.75061 62.600983 l
369.75061 48.389061 l
395.47916 48.389061 l
395.47916 43.978455 l
395.47916 42.064354 394.80441 40.42725 393.46561 39.081337 c
392.11258 37.735435 390.48969 37.060711 388.56137 37.060711 c
369.75061 37.060711 l
369.75061 7.8839798 l
356.31638 7.8839798 l
f
411.52716 7.8839798 m
411.52716 67.011589 l
411.52716 68.932793 412.19833 70.566345 413.54425 71.912254 c
414.8866 73.254608 416.5166 73.925781 418.44135 73.925781 c
459.52167 73.925781 l
459.52167 62.600983 l
424.96136 62.600983 l
424.96136 48.389061 l
450.69339 48.389061 l
450.69339 43.978455 l
450.69339 42.064354 450.02219 40.42725 448.6763 39.081337 c
447.33038 37.735435 445.70038 37.060711 443.77917 37.060711 c
424.96136 37.060711 l
424.96136 20.174721 l
459.52167 20.174721 l
459.52167 7.8839798 l
411.52716 7.8839798 l
f
480.37802 45.125488 m
496.31229 45.125488 l
499.76764 45.125488 502.32446 45.828636 503.99002 47.24556 c
505.64841 48.644737 506.48651 50.825188 506.48651 53.765583 c
506.48651 56.70953 505.64841 58.882866 503.99002 60.292694 c
502.44876 61.830376 500.14761 62.600983 497.08289 62.600983 c
480.37802 62.600983 l
480.37802 45.125488 l
h
466.74493 7.8839798 m
466.74493 67.011589 l
466.74493 68.932793 467.41614 70.566345 468.75848 71.912254 c
470.10086 73.254608 471.73795 73.925781 473.65207 73.925781 c
498.8017 73.925781 l
505.97516 73.925781 511.28064 72.388115 514.7395 69.319878 c
518.31909 66.116684 520.11603 61.45039 520.11603 55.306801 c
520.11603 51.205162 519.22113 47.817314 517.42426 45.125488 c
515.89014 42.565079 513.46106 40.711353 510.13718 39.567852 c
513.07758 38.530903 515.12305 37.000336 516.27362 34.958385 c
517.42426 33.033634 518.13092 29.770077 518.3866 25.160614 c
518.77014 17.291134 l
518.77014 16.524071 518.77014 15.685989 518.77014 14.794632 c
518.77014 13.896179 518.83405 13.065189 518.96545 12.301685 c
519.34546 9.9898567 520.11603 8.5196457 521.2666 7.8839798 c
506.28766 7.8839798 l
505.64841 9.1659698 505.26486 10.504768 505.14062 11.91106 c
504.88492 13.960102 504.76062 15.373482 504.76062 16.136993 c
504.56174 23.23941 l
504.30252 27.081818 503.53903 29.830441 502.2641 31.499516 c
500.85074 32.902241 498.35422 33.60894 494.77106 33.60894 c
480.37802 33.60894 l
480.37802 7.8839798 l
466.74493 7.8839798 l
f
528.86975 7.8839798 m
528.86975 67.011589 l
528.86975 68.932793 529.54089 70.566345 530.8797 71.912254 c
532.23279 73.254608 533.86279 73.925781 535.784 73.925781 c
576.86786 73.925781 l
576.86786 62.600983 l
542.3111 62.600983 l
542.3111 48.389061 l
568.03595 48.389061 l
568.03595 43.978455 l
568.03595 42.064354 567.36481 40.42725 566.02246 39.081337 c
564.67297 37.735435 563.04297 37.060711 561.12177 37.060711 c
542.3111 37.060711 l
542.3111 7.8839798 l
528.86975 7.8839798 l
f
584.08032 7.8839798 m
584.08032 67.011589 l
584.08032 68.932793 584.75153 70.566345 586.09741 71.912254 c
587.44336 73.254608 589.07336 73.925781 590.99451 73.925781 c
632.07483 73.925781 l
632.07483 62.600983 l
597.52167 62.600983 l
597.52167 48.389061 l
623.24658 48.389061 l
623.24658 43.978455 l
623.24658 42.064354 622.57892 40.42725 621.23297 39.081337 c
619.88715 37.735435 618.26068 37.060711 616.33594 37.060711 c
597.52167 37.060711 l
597.52167 20.174721 l
632.07483 20.174721 l
632.07483 7.8839798 l
584.08032 7.8839798 l
f
639.29822 28.427711 m
652.73242 28.427711 l
653.24384 24.588867 654.71759 21.900608 657.15015 20.359375 c
659.71057 18.569572 663.23334 17.678207 667.71143 17.678207 c
671.67462 17.678207 674.6825 18.377808 676.73859 19.787632 c
678.77704 21.193913 679.81042 23.239407 679.81042 25.931217 c
679.81042 30.025761 674.04681 33.353249 662.53021 35.910118 c
662.14313 36.105431 l
660.60547 36.485405 l
654.07837 37.895233 649.72455 39.37254 647.55121 40.90667 c
644.98724 42.312935 643.19391 44.36554 642.17822 47.050243 c
640.89624 49.351433 640.26056 52.29538 640.26056 55.878544 c
640.26056 62.149986 642.43036 67.0755 646.78772 70.662224 c
651.13794 74.121101 657.46619 75.846985 665.79382 75.846985 c
673.59583 75.846985 679.61505 74.050087 683.84106 70.470459 c
688.18774 66.500221 690.48895 61.315449 690.74817 54.923279 c
683.07043 54.923279 l
680.12299 54.923279 678.01001 56.26918 676.73859 58.953896 c
676.09229 60.228783 675.20099 61.315449 674.04681 62.217461 c
671.74213 63.87587 668.60284 64.710396 664.63971 64.710396 c
660.79724 64.710396 658.04504 64.007263 656.37952 62.600983 c
654.46545 61.191158 653.50659 59.206039 653.50659 56.645615 c
653.50659 53.186745 657.21411 50.629871 664.63971 48.964348 c
666.81305 48.32513 668.41455 47.941608 669.44092 47.817318 c
671.74213 47.050243 673.75916 46.442993 675.48859 45.995544 c
677.21454 45.544544 678.58881 45.185867 679.61505 44.937283 c
681.40491 44.170227 683.19476 43.403164 684.99164 42.636108 c
687.54852 41.098423 689.53369 39.109745 690.94348 36.680729 c
692.34265 33.99601 693.05292 31.048519 693.05292 27.852425 c
693.05292 20.938232 690.74817 15.561707 686.14227 11.726395 c
681.52924 8.139679 675.00214 6.3498611 666.56091 6.3498611 c
657.84973 6.3498611 651.32971 8.2000427 646.97943 11.911064 c
642.24213 15.622066 639.68176 21.129982 639.29822 28.427711 c
f
720.24097 7.8839798 m
720.24097 62.217461 l
700.65967 62.217461 l
700.65967 67.011589 l
700.65967 68.932793 701.33087 70.566345 702.66968 71.912254 c
704.01556 73.254608 705.64551 73.925781 707.56677 73.925781 c
753.25659 73.925781 l
753.25659 62.217461 l
733.87054 62.217461 l
733.87054 7.8839798 l
720.24097 7.8839798 l
f
0.19960326 0.21025406 0.20868239 sc
275.24951 168.54063 m
277.82767 165.15279 281.85831 154.10498 282.43005 151.45576 c
283.97479 144.25037 287.93442 141.75388 286.62402 148.75685 c
285.31363 155.75275 283.12961 159.73718 280.46622 165.69968 c
277.06061 173.34543 275.25659 180.0359 273.18271 183.53027 c
273.23242 183.54449 273.28214 183.54449 273.33185 183.55869 c
268.36725 193.13275 254.93304 186.30379 247.0174 190.17815 c
248.97057 190.70728 255.44086 193.57309 260.27051 196.3111 c
271.69476 196.78694 285.42017 199.45746 284.25537 207.71756 c
261.33234 209.20197 l
248.01886 208.5237 226.26767 190.12488 214.32143 184.44649 c
214.65169 179.09128 215.67799 178.46272 214.0835 171.86812 c
216.67941 172.34753 218.68587 172.63873 220.37267 172.87666 c
221.66888 171.62663 222.63481 168.49802 224.8046 165.47238 c
228.27411 160.6463 226.68674 146.45923 227.00989 145.21274 c
227.33304 143.96983 230.40839 140.04575 232.39352 145.07425 c
233.33459 147.45711 229.70526 163.80333 228.59018 168.14645 c
227.81602 171.14368 230.60728 174.70554 232.42548 176.6516 c
233.97379 177.55005 235.80624 178.70419 238.12163 180.22057 c
245.09264 183.57645 252.06367 182.65669 259.98285 182.48268 c
262.74924 179.23332 267.18115 170.77078 271.15494 163.40204 c
276.56345 153.34146 277.34473 124.76488 277.31277 121.90262 c
277.24884 117.20081 279.03152 116.96999 281.11966 120.41466 c
283.20422 123.85577 278.42429 156.57307 274.09534 165.97311 c
269.75934 175.37672 274.32974 169.76581 275.24951 168.54063 c
f
201.90416 167.14505 m
201.90416 167.14505 206.01869 185.57227 209.68918 189.70943 c
213.34894 193.83948 205.64085 189.51019 205.64085 189.51019 c
205.64085 189.51019 199.51564 179.3573 199.11458 172.77335 c
198.71709 166.18585 201.90416 167.14505 201.90416 167.14505 c
h
f
343.75943 225.41676 m
310.75443 225.41676 l
312.008 185.13187 312.69339 132.49588 308.61658 109.86757 c
310.66919 117.595 317.38452 126.19601 323.81577 184.98625 c
325.7157 182.84488 334.17468 183.10057 333.86923 189.12341 c
333.86923 189.12697 l
331.27335 189.57797 330.05527 190.48708 329.89548 191.65898 c
329.52969 194.21941 334.24927 197.98367 340.51361 200.61157 c
340.21887 200.73587 340.03775 200.85306 339.95251 200.94539 c
339.8602 201.05193 339.8602 201.1407 339.93475 201.22949 c
340.26859 201.66983 342.18622 202.01431 342.1756 202.95537 c
342.17203 203.14003 342.0939 203.35666 341.91278 203.59459 c
343.14505 206.46751 343.53925 203.64786 343.84467 207.46541 c
333.72012 208.38516 345.67352 215.22124 339.89215 218.06932 c
342.27502 218.9216 343.39719 221.83713 343.75943 225.41676 c
f
187.46521 168.00854 m
187.46521 168.00854 182.7776 185.95988 182.74921 191.29381 c
182.71724 196.62062 178.76393 188.72218 178.76393 188.72218 c
178.76393 188.72218 179.00264 187.28976 179.39397 185.13892 c
180.25783 180.39087 181.86536 172.14178 183.29025 168.07243 c
185.36771 162.17386 187.46521 168.00854 187.46521 168.00854 c
h
f
191.00932 183.72072 m
191.00932 183.72072 188.63145 175.3085 190.00934 170.45755 c
191.38364 165.5995 193.79546 166.74373 193.79546 166.74373 c
193.79546 166.74373 192.76917 180.62186 195.13782 184.00616 c
197.49936 187.39401 191.00932 183.72072 191.00932 183.72072 c
h
f
75.721306 217.43362 m
74.812195 212.80998 73.033028 208.54852 70.46196 205.66495 c
72.18074 205.60457 73.455627 204.79846 74.464172 203.57683 c
78.828613 198.26068 78.168083 185.12831 86.534737 191.17957 c
82.823723 188.40607 83.068756 185.30942 84.716515 182.25894 c
84.83371 162.39348 95.192589 117.09427 98.523621 113.04235 c
92.791969 152.42523 92.145645 179.13033 92.230881 196.4389 c
92.429749 201.67694 92.475914 206.88654 92.415543 212.06067 c
92.415543 212.38737 92.415543 217.85269 92.415543 225.41676 c
66.35321 225.41676 l
69.311371 221.05943 72.60334 218.15808 75.721306 217.43362 c
f
148.53174 157.43246 m
150.16885 159.20451 150.79031 173.58336 150.79031 177.44351 c
150.79031 178.14311 151.01758 178.66513 151.3159 179.09837 c
152.90329 178.82849 154.52974 178.48047 156.24852 177.93358 c
160.23653 171.29282 169.67918 172.13092 174.31706 169.87589 c
176.24536 168.93837 175.07701 135.91924 174.99179 131.67555 c
175.49606 136.24951 179.04727 169.98952 177.72977 173.25664 c
170.23672 191.91469 142.17154 200.6329 118.62349 207.27011 c
111.87619 195.28479 l
122.37711 194.08803 136.63165 197.8026 138.09474 187.01047 c
131.67772 188.11134 126.58528 188.17528 122.78549 185.52252 c
121.42183 181.05865 115.20367 180.14244 116.43594 177.5891 c
117.70016 178.18216 118.99991 178.50177 120.38133 178.68645 c
120.07594 177.75603 119.8309 176.00882 120.17181 172.73462 c
121.26203 162.21948 118.95018 143.02521 120.78616 140.77728 c
122.62215 138.52582 124.71735 137.15862 125.43825 141.13597 c
125.75431 142.86896 122.23861 157.2691 123.88282 167.1095 c
125.05826 174.10184 137.16788 180.56857 145.96066 177.92648 c
146.0459 177.91228 l
146.0246 177.3512 146.03525 176.74039 146.08852 176.03369 c
146.52176 170.7424 142.91019 159.80467 142.91019 158.70024 c
142.91019 157.60292 145.08707 153.67883 148.53174 157.43246 c
f
0.80880445 0.11293202 0.14633402 sc
83.768272 100.90786 m
75.465553 111.0146 67.01368 158.78546 65.77076 178.19279 c
65.678421 178.47334 65.596756 178.75745 65.515068 179.04153 c
63.274258 181.90736 61.381462 185.49408 59.843792 189.79459 c
56.828819 191.80458 54.392689 194.68106 52.904732 198.15057 c
50.983528 202.64287 50.887642 207.60745 52.467934 212.04646 c
51.807415 212.89876 51.171741 213.77945 50.550278 214.69566 c
48.36274 217.92017 47.297375 221.65956 47.293823 225.41676 c
38.351879 225.41676 l
18.962278 225.41676 3.2339783 209.69911 3.2339783 190.3024 c
3.2339783 135.43271 l
3.2339783 116.03957 18.962278 100.31481 38.351879 100.31481 c
84.322273 100.31481 l
84.137611 100.51368 83.945839 100.69834 83.768272 100.90786 c
f
718.64966 225.41676 m
362.75473 225.41676 l
362.75473 224.774 362.82574 224.14188 362.76184 223.49911 c
362.46353 220.53386 361.87756 217.92371 361.09631 215.62964 c
362.4884 212.70699 363.16312 209.39371 362.88257 205.94194 c
362.53812 201.64143 361.39102 198.27487 359.85693 195.64699 c
359.09698 193.70802 357.94284 191.64478 356.185 189.69516 c
355.23685 188.3315 354.10046 187.08502 352.81845 186.00191 c
352.23605 180.89171 350.05917 176.18282 346.50085 172.44341 c
344.91342 170.76724 343.07748 169.33965 341.06039 168.17839 c
336.08871 129.44891 331.00339 115.72707 328.134 107.97477 c
327.70074 106.80998 327.31723 105.88665 327.07932 104.96688 c
326.63187 103.28008 325.9216 101.75305 325.08707 100.31481 c
718.64966 100.31481 l
738.04993 100.31481 753.76758 116.03957 753.76758 135.43271 c
753.76758 190.3024 l
753.76758 209.69911 738.04993 225.41676 718.64966 225.41676 c
f
ep
end
%%Trailer
%%EOF
